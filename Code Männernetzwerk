#I-Graph Installation
install.packages("igraph")
# installiert das Paket igraph
install.packages("igraphdata")
# installiert das Paket igraphdata

library("igraph")
# lädt das Paket "igraph" zum Verwenden

?igraph
# liefert die Hilfefunktion für igraph



#################################
#####Unterstützernetzwerk Männer
support <- read.csv("https://raw.githubusercontent.com/EileenBreuer/Netzwerke/master/EdgelistMenSupport.csv", header=T, as.is=T, sep = ",")
# lädt die edgelist aus github in der working directory. Auf Trennzeichen achten!
nodes <- read.csv("https://raw.githubusercontent.com/EileenBreuer/Netzwerke/master/NodelistMenSupport.csv", header=T, as.is=T, sep = ",")
# lädt die Nodelist aus github in die working direcotry

head(support)
# überprüfen von Edge- und Nodelist in R

hties <-as.matrix(support)
# Umwandlung der Edgelist in eine Matrix

support <- graph_from_data_frame(d=hties, vertices=nodes, directed=T)
# Kombination der Edge- und Nodelist in ein igraph-Objekt

support #zeigt das igraph-Objekt an

edge_attr(support)
# zeigt die Verteilung des Attributs "weight" an.
vertex_attr(support)
# zeigt die Verteilung der Vertex-Attribute an.

class(help)#Test, ob ein igraph-Objekt vorliegt

#Visualisierung Support-Netzwerk#


#einfache Visualisierung
plot(support, layout = layout_with_kk,layout=layout_nicely, main = "Unterstützernetzwerk Männermannschaft", sub="Formen der Unterstützung zwischen den Spielern und den angegebenen Alteri", vertex.size=11, vertex.frame.color="grey", edge.arrow.size=.1, edge.curved=.4, vertex.label.dist=0, vertex.label.degree=3, vertex.label.cex=.6, vertex.label.family="Helvetica", vertex.label.font=1, vertex.label.color="dimgrey")

#NURERKLÄRUNG:
#VERTEX LABELS schöner machen
#vertex.label.dist=0 # gibt an, wie weit der Label vom Knoten entfernt platziert werden soll
#vertex.label.degree=3 # gibt an, in welchem Winkel der Label zum Knoten gesetzt wird
#vertex.label.cex=.8 # gibt die Größe des Labels an
#vertex.label.family="Helvetica" # gibt die Schriftart des Knotens an
#vertex.label.font=2 # gibt an, welcher Schriftschnitt verwendet wird.

#schönere Visualisierung mit visNetwork
library(visNetwork)
?visNetwork

# Mit dem Befehl visIgraph() lassen sich bereits vorhandenen igraph-Objekte visualisieren. Mehr Info hier: http://datastorm-open.github.io/visNetwork/

visIgraph(support, layout = "layout_with_kk")
# oder auch:
visIgraph(support, layout = "layout_in_circle")
visIgraph(support, layout = "layout_with_fr")
visIgraph(support, layout = "layout_nicely")

####### Vertexattribute festlegen
V(support)$size = hd

#Knoten einfärben je nach männlich/weiblich
Frauen<-V(support)[sex=="w"] #wählt alle Knoten aus, die das Knoten-Attribut $sex gleich "w" haben
Frauen
V(support)[Frauen]$color="maroon1" #weist allen Werten Weiblich die Farbe "maroon1" zu

Men<-V(support)[sex=="m"]#wählt alle Knoten aus, die das Knotenattribut §sex gleich "m" haben
Men
V(support)[Men]$color="skyblue1"

#Knoten verschiedene Formen zuweisen je nach Spieler/Unterstützer
Spieler<-V(support)[person=="Player"] #wählt alle Knoten aus, die das Knoten-Attribut §function gleich "player" haben
Spieler
V(support)[Spieler]$shape="circle" #weist allen ausgewählten Knoten die §Form gleich "circle" zu

Bekannte<-V(support)[person=="Friend"] #wählt alle Knoten aus, die das Knotenattribut §function gleich "friend" haben
Bekannte
V(support) [Bekannte]$shape="square"

###### Kantenattribute
E(support)$arrow.size <- .1
E(support)$width <- E(support)$weight/2 # legt das Kantengewicht fest
E(support)$curved=.4


#NUR FÜR EDGELIST, IN DER DER SUPPORT NUR EINE ZEILE UMFASST Edges einfärben je nach Unterstützerform#
Instrumental<- E(support)[support == "1"]
# wöhlt alle Kanten aus, die das Kanten-Attribut "1" bei $instrumental gesetzt haben
Instrumental
E(support)[Instrumental]$color = "yellow"
# weist allen Werten von Instrumental die Farbe "yellow" zu.

Medical<- E(support)[support == "2"]
# wöhlt alle Kanten aus, die das Kanten-Attribut "1" bei $medical gesetzt haben
Medical
E(support)[Medical]$color = "red"
# weist allen Werten von Medizinisch die Farbe "red" zu.

Financial<- E(support)[support == "3"]
# wöhlt alle Kanten aus, die das Kanten-Attribut "1" bei $financial gesetzt haben
Financial
E(support)[Financial]$color = "orange"
# weist allen Werten von Finanziell die Farbe "orange" zu.

Emotional<- E(support)[support == "4"]
# wöhlt alle Kanten aus, die das Kanten-Attribut "1" bei $medical gesetzt haben
Emotional
E(support)[Emotional]$color = "tomato"
# weist allen Werten von Medizinisch die Farbe "red" zu.


#NUR FÜR EDGELIST, IN DER SUPPORT MEHRERE ZEILEN UMFASST Edges einfärben je nach Unterstützerform#
Instrumental<- E(support)[instrumental == "1"]
# wöhlt alle Kanten aus, die das Kanten-Attribut "1" bei $instrumental gesetzt haben
Instrumental
E(support)[Instrumental]$color = "yellow"
# weist allen Werten von Instrumental die Farbe "yellow" zu.

Medizinisch<- E(support)[medical == "1"]
# wählt alle Kanten aus, die das Kanten-Attribut "1" bei $medical gesetzt haben
Medizinisch
E(support)[Medizinisch]$color = "red"
# weist allen Werten von Medizinisch die Farbe "red" zu.

Finanziell<- E(support)[financial == "1"]
# wöhlt alle Kanten aus, die das Kanten-Attribut "1" bei $financial gesetzt haben
Finanziell
E(support)[Finanziell]$color = "orange"
# weist allen Werten von Finanziell die Farbe "orange" zu.

Emotional<- E(support)[emotional == "1"]
# wöhlt alle Kanten aus, die das Kanten-Attribut "1" bei $medical gesetzt haben
Emotional
E(support)[Emotional]$color = "tomato"
# weist allen Werten von Medizinisch die Farbe "red" zu.

E(favfriend)$color="black" #färbt alle Kanten in einer Farbe ein



# Analyse des support-Netzwerks

betweenness(support, directed = TRUE)
# Spieler A gleich höchste mit 6

closeness (support, mode ="out")
#gibt es nicht, weil unverbunden

# Anzahl	der	Dyaden im Netzwerk "Support-Männer"
dyad.census(support)
#  2 Mutuelle, 74 asymetrische, 1005 null

# Anzahl und Art der Triaden im Netzwerk "Männer" 
triad_census(support)
# 003-14474 012-803 102-881 021D-42 021U-0 021C-3 111D-0 111U-10 030T-0 030C-0 201-0 120D-2 120U-0 120C-2 210-0 300-0

#Auflistung der Knoten Attribute 
vertex_attr(support)

# Anzahl der Componenten: 52
components(support)
#sind diese Componenten verbunden? FALSE(nein)
is_connected(support)

# Durchmesser des Netzwerks: 13 (Schritte maximal von einem zum anderen Ende)
diameter(support)

# Pfaddistanz des Netzwerks: 1,327 (Schritte durchschnittlich von einem zum anderen Ende)
mean_distance(support)

# Dichte des Netzwerks: 3% (fast 4) (% der Möglichen Beziehungen sind realisiert)
edge_density(support)

# Anzahl der Cluster: 11 ("Kleingruppen")
cluster_walktrap(support)

#Anzeigen der Cluster im Bild
gc <- cluster_walktrap(support)
modularity(gc)
membership(gc)
plot(gc, support, edge.arrow.size = 0.2)

### 

degree(support, mode = "out")
# Anzeigen der Outdegrees pro Akteur des Netzwerk "MännerSupport",Spieler E und Spieler C höchsten Outdegree
degree(support, mode="out", normalized = TRUE)
# Anzeigen der prozentualen (d.h. normalisierten) Outdegrees des Netzwerk "MännerSupport" an

# der Wert der Zentralisierung, der Closeness und der Betweenness interessiert hier wenig, 
# da es sich um mehrere Ego Netze handelt, 
# diese Werte werden im Spieler Netzwerk spannender

###############################
#####Fav/Friend Netzwerk Männer
favfriend <- read.csv("https://raw.githubusercontent.com/EileenBreuer/Netzwerke/master/EdgelistMenFavFriend.csv", header=T, as.is=T, sep = ",")
# lädt die edgelist aus github in der working directory. Auf Trennzeichen achten!
nodes <- read.csv("https://raw.githubusercontent.com/EileenBreuer/Netzwerke/master/NodelistMenFavFriend.csv", header=T, as.is=T, sep = ",")
# lädt die Nodelist aus github in die working direcotry

head(favfriend)
# überprüfen von Edge- und Nodelist in R

wties <-as.matrix(favfriend)
# Umwandlung der Edgelist in eine Matrix

favfriend <- graph_from_data_frame(d=wties, vertices=nodes, directed=T)
# Kombination der Edge- und Nodelist in ein igraph-Objekt

favfriend #zeigt das irgraph-Objekt an

edge_attr(favfriend)
# zeigt die Verteilung des Attributs "weight" an.

vertex_attr(favfriend)
# zeigt die Verteilung der Vertex-Attribute an.

class(help)#Test, ob ein igraph-Objekt vorliegt

#Visualisierung Fav/Friend-Netzwerk#

E(favfriend)$width <- E(favfriend)$weight*3 # multipliziert die Gewicht mit dem Faktor 2, daher werden diese auch stärker visualisiert werden.

colrs <- c("yellow, red") #c definiert Farbenvektor
#definiert das Farbspektrum, der verwendeten Farben und legt diese in einem neuen Vector colrs fest. Da wir wissen, dass wir bei §sex nur zwei Werte haben (männlich, weiblich) brauchen wir auch zwei Werte. Die direkten Farbpaletten sind hier hinterlegt: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf.
E(favfriend)$color <- colrs[E(favfriend)$favorite]
E(favfriend)$color<- colrs[E(favfriend)$friendship]
# weist dem Vertex-Attribut color die Funktion colrs zu, die wir vorher mit zwei Farben definiert haben.
plot(favfriend,layout=layout_with_kk, layout=layout_nicely, edge.arrow.size=0.2, edge.curved=0.6,main="Freundschaftsnetzwerk Männermanschaft")

####Edges Form je nach Art der Beziehung bestimmen#

Freunde<- E(favfriend)[friendship == "1"]
# wöhlt alle Knoten aus, die das Edge-Attribut "1" bei $favorite gesetzt haben
Freunde
E(favfriend)[Freunde]$color = "yellow"

# weist allen Werten von Favoriten die Farbe "red" zu.
Favoriten<- E(favfriend)[favorite == "1"]
# wöhlt alle Kanten aus, die das Kanten-Attribut "1" bei $favorite gesetzt haben
Favoriten
E(favfriend)[Favoriten]$color = "red"
# weist allen Werten von Favoriten die Farbe "red" zu.

E(favfriend)$color="black" #färbt alle Kanten in einer Farbe ein



# Analyse des fav/friend-Netzwerks

betweenness(favfriend, directed = TRUE)
# Nico höchster Wert=35,75(höchster Wert)

closeness (favfriend, mode ="out")
# geht nicht, weil nicht verbunden

eigen_centrality(favfriend, directed = TRUE)
# wie liest man das aus?

### Analyse Fav/Friend-Netzwerk

# Anzahl	der	Dyaden im Netzwerk "Fav/Friend-Männer"
dyad.census(favfriend)
# 9 mutuelle - 32 asymetrische - 130 null

# Anzahl und Art der Triaden im Netzwerk "Männer" 
# 34 mal den Out Star 021D und 4 mal eine Linie 021C
triad_census(favfriend)
# 003-6468 012-727 102-410 021D-91 021U-5 021C-27 111D-2 111U-34 030T-0 030C-0 201-3 120D-2 120U-1 120C-0 210-0 300-0

#Auflistung der Knoten Attribute 
vertex_attr(favfriend)

# Anzahl der Componenten: 52
components(favfriend)
#sind diese Componenten verbunden? TRUE (ja)
is_connected(favfriend)

# Durchmesser des Netzwerks: 12 (Schritte maximal von einem zum anderen Ende)
diameter(favfriend)

# Pfaddistanz des Netzwerks: 2,29 (Schritte durchschnittlich von einem zum anderen Ende)
mean_distance(favfriend)

# Dichte des Netzwerks: 14% (fast 15) (% der Möglichen Beziehungen sind realisiert)
edge_density(favfriend)

# Anzahl der Cluster: 4 ("Kleingruppen")
cluster_walktrap(favfriend)

### 

degree(favfriend, mode = "out")
# Anzeigen der Outdegrees pro Akteur des Netzwerk "Männer", Zagros, Ruben, Max max. Outdegrees
degree(favfriend, mode="out", normalized = TRUE)
# Anzeigen der prozentualen (d.h. normalisierten) Outdegrees des Netzwerk "Frauen" an

# der Wert der Zentralisierung, der Closeness und der Betweenness interessiert hier wenig, 
# da es sich um mehrere Ego Netze handelt, 
# diese Werte werden im Spielerinnen Netzwerk spannender


#Anzeigen der Cluster im Bild
favfriendcluster <- cluster_walktrap(favfriend)
modularity(favfriendcluster)
membership(favfriendcluster)
plot(favfriendcluster, favfriend, edge.arrow.size = 0.2)


############################################
#Gesamtnetzwerk erstellen->FavFriend und Support zusammen in einem

m<-support+favfriend #erstellte Teilnetzwerke einfach addieren
plot(m, layout=layout_with_kk, layout=layout_nicely, edge.arrow.size=0.2, edge.curved=0.2)

# vergleichende Darstellung der beiden Teilnetze
par(mfrow=c(1,2), mar=c(0,0,2,0))   
plot(support, layout=layout_nicely, edge.arrow.size=0.2, main="Beziehungsnetzwerk Männermannschaft - Unterstützer")
plot(favfriend, layout=layout_nicely, edge.arrow.size=0.2, main="Freundschaftsnetzwerk Männermmannschaft - Freunde")

#Netzwerkmaße des Gesamtnetzwerks berechnen

# Plotten der Cluster des Gesamtnetzwerks in Farben 
gc <- cluster_walktrap(m)
modularity(gc)
membership(gc)
plot(gc, m, edge.arrow.size = 0.2)

### Analyse ### Infos zum Männer-Netzwerk

# Anzahl	der	Dyaden im Netzwerk "Männer"
dyad.census(m)
# 10 mutuelle - 102 asymetrische - 1214 null

# Anzahl und Art der Triaden im Netzwerk "Männer" 
# 34 mal den Out Star 021D und 4 mal eine Linie 021C
triad_census(m)
# 003-6468 012-727 102-410 021D-91 021U-5 021C-27 111D-2 111U-34 030T-0 030C-0 201-3 120D-2 120U-1 120C-0 210-0 300-0

#Auflistung der Knoten Attribute 
vertex_attr(m)

# Anzahl der Componenten: 52
components(m)
#sind diese Componenten verbunden? TRUE (ja)
is_connected(m)

# Durchmesser des Netzwerks: 6 (Schritte maximal von einem zum anderen Ende)
diameter(m)

# Pfaddistanz des Netzwerks: 2,86 (Schritte durchschnittlich von einem zum anderen Ende)
mean_distance(m)

# Dichte des Netzwerks: 4 (fast5) (% der Möglichen Beziehungen sind realisiert)
edge_density(m)

# Anzahl der Cluster: 7 ("Kleingruppen")
cluster_walktrap(m)

### 

degree(m, mode = "out")
# Anzeigen der Outdegrees pro Akteur des Netzwerk "Männer", Zagros, Ruben, Max max. Outdegrees
degree(m, mode="out", normalized = TRUE)
# Anzeigen der prozentualen (d.h. normalisierten) Outdegrees des Netzwerk "Frauen" an

# der Wert der Zentralisierung, der Closeness und der Betweenness interessiert hier wenig, 
# da es sich um mehrere Ego Netze handelt, 
# diese Werte werden im Spieler Netzwerk spannender

###

############################################
# Ego Netzwerke der stark und wenig unterstützten Spieler erstellen

me <- subgraph<-make_ego_graph(m, order=1, c("SpielerE")) 
me
plot(me[[1]], edge.arrow.size=.1, layout=layout_with_kk, layout=layout_nicely, edge.curved=0.2)

mk<- subgraph<-make_ego_graph(m, order=1, c("SpielerK")) 
mk
plot(mk[[1]], edge.arrow.size=.1, layout=layout_with_kk, layout=layout_nicely, edge.curved=0.2)
#erstellt Egonetzwerk von Knoten mit ID 18, zeigt alle Knoten an, die innerhalb eines Schrittes mit 18 verbunden sind

mm <- subgraph<-make_ego_graph(m, order=1, c("SpielerM")) 
mm
plot(mm[[1]], edge.arrow.size=.1, layout=layout_with_kk, layout=layout_nicely, edge.curved=0.2)

mb <- subgraph<-make_ego_graph(m, order=1, c("SpielerB")) 
mb
plot(mb[[1]], edge.arrow.size=.1, layout=layout_with_kk, layout=layout_nicely, edge.curved=0.2)


# vergleichende Darstellung der vier Männer
par(mfrow=c(2,2), mar=c(0,0,2,0))   
plot(me[[1]], layout=layout_nicely, edge.arrow.size=0.2, main="Ego Spieler E")
plot(mk[[1]], layout=layout_nicely, edge.arrow.size=0.2, main="Ego Spieler K")
plot(mm[[1]], layout=layout_nicely, edge.arrow.size=0.2, main="Ego Spieler M")
plot(mb[[1]], layout=layout_nicely, edge.arrow.size=0.2, main="Ego Spieler B")

